{"version":3,"file":"static/js/9016.eab13216.chunk.js","mappings":"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","sources":["pages/Profile/components/pinnedSlides/index.js","pages/Profile/components/UserUploads/index.js"],"sourcesContent":["\n// import firebase from 'firebase/compat';\n// import { collection,  getDocs, getFirestore, limit, onSnapshot, orderBy, query, startAfter } from 'firebase/firestore';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Button } from '../../../../components/global/button';\nimport ShareModal from '../../../../components/global/shareModal';\nimport Loading from '../../../../components/loading';\nimport { AuthContext } from '../../../../components/signUp/authMethods/authentication';\nimport SlideCard from '../../../SlideDetail/components/slideCard';\nimport './_pinnedSlides.scss';\n\nconst PinnedSLides = ({datas}) => {\n   \n    const { user,username } = useContext(AuthContext);\n\n    const [pinnedSlides,setPinnedSlides]=useState(null)\n    const [showShare, setShowShare] = useState(false)\n    const [callBackData, setCallBackData] = useState(null)\n    const { userId } = useParams();\n\n    const [pinnedSlideLimit] = useState(10);\n    const [lastPinnedSlides, setLastPinnedSlides] = useState();\n    const [showLoadMore, setShowLoadMore] = useState(false);\n    const [showMoreLoading, setShowMoreLoading] = useState(false);\n    const [loading, setLoading] = useState(true);\n    // const db = getFirestore();\n    const getFirebaseAll=()=>{\n        return Promise.all([\n            import('../../../../firebase/firestore')\n        ])\n        .then(([firestore])=>{\n            return {firestore}\n        })\n    };\n    const loadMorePinnedSlides = async() => {\n        try {\n            const {firestore:{db,collection,orderBy,limit,query,getDocs,startAfter}}=await getFirebaseAll()\n            setShowMoreLoading(true);\n            // firebase.firestore()\n            //     .collection('Web-User-Data')\n            //     .doc(username)\n            //     .collection('Pinned-Slide')\n            //     .orderBy('SlideName')\n            //     .startAfter(lastPinnedSlides?.SlideName)\n            //     .limit(pinnedSlideLimit)\n            //     .get()\n                const colRef= query(collection(db,'Web-User-Data',username,'Pinned-Slide'),\n                orderBy('SlideName'),\n                startAfter(lastPinnedSlides?.SlideName),\n                limit(pinnedSlideLimit))\n                getDocs(colRef)\n                .then(querySnapshot => {\n                    let allData = []\n                    console.log('pinnedslide',querySnapshot)\n                    querySnapshot.forEach(ele => {\n                        allData.push(ele?.data());\n\n\n                    })\n                    setLastPinnedSlides(allData[allData?.length - 1])\n                    if (allData?.length === 0) {\n                        setShowLoadMore(false)\n                    }\n                    setShowMoreLoading(false);\n                    setPinnedSlides((init) => [...init, ...allData])\n\n                })\n        } catch (error) {\n            console.log('Error fetching more user uploaded slides', error)\n        }\n    }\n\n    useEffect(async() => {\n        let isMounted=true\n\n        try{\n            const {firestore:{db,collection,orderBy,limit,query,onSnapshot}}=await getFirebaseAll()\n\n        if(isMounted && username===userId){\n            console.log('pinnedslide',username)\n            \n            // firebase.firestore().collection('Web-User-Data')\n            // .doc(username)\n            // .collection('Pinned-Slide')\n            // .orderBy('SlideName')\n            // .limit(pinnedSlideLimit)\n            const colRef =query(collection(db,'Web-User-Data',username,'Pinned-Slide'),\n            orderBy('SlideName'),\n            limit(pinnedSlideLimit))\n            onSnapshot(colRef,(querySnapShot) => {\n                if (querySnapShot?.docs) {\n                    let allPinnedSlides=[]\n                    querySnapShot.forEach(element => {\n                        allPinnedSlides.push(element?.data())    \n                        console.log('pinnedslide',element?.data())\n                    })\n                    if (allPinnedSlides?.length > 0) {\n                        setShowLoadMore(true)\n                    }\n                    setLoading(false);\n                    setShowMoreLoading(false);\n                    setLastPinnedSlides(allPinnedSlides[allPinnedSlides?.length - 1])\n                    setPinnedSlides(allPinnedSlides)\n                    \n                }\n                \n            })\n        }\n        }\n        catch(err){\n            console.log('err',err)\n        }\n        return () => {\n            isMounted=false\n        }\n    }, [username])\n    \n    const showShareModal=(show, data) => {\n\n      if (show === true && data) {\n        setShowShare(true)\n        setCallBackData(data)\n\n      }\n    }\n  const cancelShare = (show) => {\n\n      if (show === false) {\n        setShowShare(false)\n      }\n    }\n\n    return (\n       <>\n         {\n             pinnedSlides?.length>0 &&\n            <div className='pinnedSlides-container'>\n            <ShareModal\n               url={encodeURI(`https://medicospdf.com/slidedetails/${callBackData?.SlideName}/${callBackData?.slideCategory}/${callBackData?.slideSubCategory.replace(/\\s|\\//g, \"\")}`)}\n               appId={process.env.REACT_APP_ID}\n               title={callBackData?.SlideName}\n               image={callBackData?.slideImages[0]}\n               show={showShare}\n               cancel={cancelShare}\n           />\n            <h5>Pinned Slides</h5>\n\n              <div className='pinnedSlides-container-wrapper'>\n              {\n                  pinnedSlides?.map((data,index)=>{\n                      console.log('pinneded',data)\n                      return<div key={index} className='pinnedSlides-container-wrapper-slide'>\n                              <SlideCard\n                                      title={data?.slideCategory}\n                                      title2={data?.slideSubCategory}\n                                      description={data?.SlideName}\n                                      images={data?.slideImages}\n                                      wholeDatas={pinnedSlides}\n                                      datas={data}\n                                      showShareModal={showShareModal}\n                              />\n                              \n                          </div>\n                  })\n\n              }\n\n           </div>\n           {\n                        showLoadMore && pinnedSlides.length>9 &&\n                        <div className='pinnedSlides-loading' onClick={loadMorePinnedSlides}>\n                            {\n                                showMoreLoading &&\n                                <Loading />\n                            }\n                            <Button type=\"primary-outline-rounded\" label=\"Load More\" labelColor=\"black\" />\n                        \n                        </div>\n                    }\n          \n           \n       </div>\n         }\n\n       </>\n    )\n}\n\nexport default PinnedSLides\n","// import firebase from 'firebase/compat';\n// import { collection, getDocs, getFirestore, limit, onSnapshot, orderBy, query, startAfter } from 'firebase/firestore';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { Button } from '../../../../components/global/button';\nimport Loading from '../../../../components/loading';\n// import useLocalStorage from '../../../../customHooks/useLocalStorage';\nimport PinnedSLides from '../pinnedSlides';\nimport SlideTrendingProfile from '../slideTrendingProfile';\nimport PlaylistCreate from './Components/PlaylistButton';\nimport './index.scss';\nconst UserUploads = ({ user }) => {\n    // const [usernameLocalStorage, setUsernameLocalStorage] = useLocalStorage(\"username\", null);\n    const [userUploaded, setUserUploaded] = useState([]);\n    // const [slideLimit, setSlideLimit] = useState(10);\n    const slideLimit=10;\n    const [lastSlides, setLastSlides] = useState();\n    const [showLoadMore, setShowLoadMore] = useState(false);\n    const [showMoreLoading, setShowMoreLoading] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const { userId } = useParams();\n    // const db = getFirestore();\n    const getFirebaseAll=()=>{\n        return Promise.all([\n            import('../../../../firebase/firestore')\n        ])\n        .then(([firestore])=>{\n            return {firestore}\n        })\n    };\n\n    const loadMoreUploadSlides = async() => {\n        try {\n            const {firestore:{db,query,orderBy,startAfter,limit,getDocs,collection}}=await getFirebaseAll()\n            setShowMoreLoading(true);\n            // firebase.firestore()\n            //     .collection('UserUploadedSlides')\n            //     .doc(userId)\n            //     .collection('slides')\n            //     .orderBy('SlideName')\n            //     .startAfter(lastSlides?.SlideName)\n            //     .limit(slideLimit)\n            //     .get()\n            const colRef =query(collection(db,'UserUploadedSlides',userId,'slides'),\n            orderBy('SlideName'),\n            startAfter(lastSlides?.SlideName),\n            limit(slideLimit)\n            )\n            getDocs(colRef)\n                .then(querySnapshot => {\n                    let allData = []\n                    querySnapshot.forEach(ele => {\n                        // console.log(\"This is data\", ele.data())\n                        allData.push(ele?.data());\n\n                    })\n                    setLastSlides(allData[allData?.length - 1])\n                    if (allData?.length === 0) {\n                        setShowLoadMore(false)\n                    }\n                    setShowMoreLoading(false);\n                    console.log('more slides', allData)\n                    setUserUploaded((init) => [...init, ...allData])\n\n                })\n        } catch (error) {\n            console.log('Error fetching more user uploaded slides', error)\n        }\n    }\n\n    useEffect(async() => {\n        let isMounted = true;\n        try {\n            const {firestore:{db,query,collection,orderBy,limit,onSnapshot}}=await getFirebaseAll()\n            setShowMoreLoading(true);\n            // firebase.firestore().collection('UserUploadedSlides')\n            //     .doc(userId)\n            //     .collection('slides')\n            //     .orderBy('SlideName')\n            //     .limit(slideLimit)\n            const colRef =query(collection(db,'UserUploadedSlides',userId,'slides'),\n            orderBy('SlideName'),\n            limit(slideLimit))\n                onSnapshot(colRef,(querySnapshot) => {\n\n                    if (querySnapshot && isMounted) {\n                        let userUploadedData = []\n                        querySnapshot.forEach((doc) => {\n                            userUploadedData.push(doc.data())\n                        })\n                        if (userUploadedData?.length > 0) {\n                            setShowLoadMore(true)\n                        }\n                        setLoading(false);\n                        setShowMoreLoading(false);\n                        setLastSlides(userUploadedData[userUploadedData?.length - 1])\n                        setUserUploaded(userUploadedData)\n                    }\n                    if (querySnapshot.empty) {\n                        setLoading(false);\n                        setShowMoreLoading(false);\n                    }\n                })\n        } catch (error) {\n            console.log(\"Error fetching user uploaded slides\", error)\n        }\n        return () => {\n            isMounted = false\n        }\n    }, [userId, slideLimit])\n\n    return <div className='uploaded-slide-container'>\n\n        <PlaylistCreate />\n        <PinnedSLides />\n\n        <div className='uploaded-slide-container-uploadContainer'>\n            <h3>Uploaded Slides</h3>\n\n\n            <SlideTrendingProfile showTitle={false} loading={loading} details={userUploaded} from=\"userUploads\" />\n            {\n                showLoadMore && userUploaded?.length > 9 &&\n                <div className='load-more-container' onClick={loadMoreUploadSlides}>\n                    {\n                        showMoreLoading &&\n                        <Loading />\n                    }\n                    <Button type=\"primary-outline-rounded\" label=\"Load More\" labelColor=\"black\" />\n\n                </div>\n            }\n        </div>\n\n\n\n    </div>\n}\n\nexport default React.memo(UserUploads);"],"names":["_ref","datas","_useContext","useContext","AuthContext","username","user","_useState","useState","_useState2","_slicedToArray","pinnedSlides","setPinnedSlides","_useState3","_useState4","showShare","setShowShare","_useState5","_useState6","callBackData","setCallBackData","userId","useParams","_useState7","pinnedSlideLimit","_useState9","_useState10","lastPinnedSlides","setLastPinnedSlides","_useState11","_useState12","showLoadMore","setShowLoadMore","_useState13","_useState14","showMoreLoading","setShowMoreLoading","_useState15","_useState16","setLoading","getFirebaseAll","Promise","all","then","_ref2","firestore","loadMorePinnedSlides","_ref4","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$getFirebaseAll","_yield$getFirebaseAll2","db","collection","orderBy","limit","query","getDocs","startAfter","colRef","_context","prev","next","sent","SlideName","querySnapshot","allData","console","log","forEach","ele","push","data","length","init","concat","_toConsumableArray","t0","stop","apply","arguments","useEffect","_callee2","isMounted","_yield$getFirebaseAll3","_yield$getFirebaseAll4","onSnapshot","_context2","querySnapShot","docs","allPinnedSlides","element","abrupt","showShareModal","show","_jsx","_Fragment","children","_jsxs","className","ShareModal","url","encodeURI","slideCategory","slideSubCategory","replace","appId","process","title","image","slideImages","cancel","map","index","SlideCard","title2","description","images","wholeDatas","onClick","Loading","Button","type","label","labelColor","UserUploads","userUploaded","setUserUploaded","lastSlides","setLastSlides","_useState8","loading","loadMoreUploadSlides","userUploadedData","doc","empty","PlaylistCreate","PinnedSLides","SlideTrendingProfile","showTitle","details","from","React"],"sourceRoot":""}