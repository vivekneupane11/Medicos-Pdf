{"version":3,"file":"static/js/9909.77c38392.chunk.js","mappings":"6QAMA,EAJmB,SAACA,GAClB,OAAMC,EAAAA,EAAAA,KAAA,OAAKC,MAAM,6BAA6BC,QAAQ,cAAcC,KAAK,eAAeC,UAAWL,EAAMK,UAAUC,UAACL,EAAAA,EAAAA,KAAA,QAAMM,EAAE,qNCqG9H,EA9F0B,SAAHC,GAAsE,IAAjEC,EAAgBD,EAAhBC,iBAAiBC,EAAUF,EAAVE,WAAWC,EAAQH,EAARG,SAAWC,EAAQJ,EAARI,SAAWC,EAAUL,EAAVK,WAC1EC,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAUF,EAAA,GAAGG,EAAaH,EAAA,GACjCI,GAA+BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvCE,EAAOD,EAAA,GAAGE,EAAUF,EAAA,GACvBG,GAAUC,EAAAA,EAAAA,MACNC,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAAxBF,SAYFG,EAAoB,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,IAAAA,MAAA,SAAAS,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACtBrB,EAAQ,CAADmB,EAAAE,KAAA,eAAAF,EAAAG,OAAA,iBACM,OAAhBrB,GAAW,GAAKkB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EATTE,QAAQC,IAAI,CACf,kCAEHC,MAAK,SAAAC,GACF,MAAM,CAACC,WADUhC,EAAAA,EAAAA,GAAA+B,EAAA,GAAJ,OAQ4C,OAAAd,EAAAO,EAAAS,KAAAf,EAAAD,EAAxDe,UAAWb,EAAED,EAAFC,GAAGC,EAAGF,EAAHE,IAAIC,EAAMH,EAANG,OAAOC,EAAMJ,EAANI,OAC3BC,EAASH,EAAID,EAAG,gBAAiBV,EAAS,WAAWR,GAC3DoB,EAAOE,GACLO,MAAK,SAACI,GACAA,EAASC,UACT7B,GAAW,GACf8B,EAAAA,GAAAA,MAAY,0BAA0B,CAAEC,MAAO,OAAQC,iBAAiB,KAElE5C,GAAaC,GAAaC,GAcpBF,GAAaC,GAAaC,EAc5BF,GAAYC,IAAaC,GAG/B0B,EAAOF,EAAID,EAAG,gBAAgBV,EAAS,WAAWf,EAASC,EAASM,GAC5D,CACIsC,aAAa,qBAExBT,MAAK,WACFxB,GAAW,GACX8B,EAAAA,GAAAA,QAAc,8BAA+B,CAAEC,MAAO,OAAQC,iBAAiB,IAC/E9C,IACFe,EAAQiC,KAAK,aAADC,OAAc/C,EAAQ,KAAA+C,OAAI9C,EAAQ,KAAA8C,OAAIxC,OAvB5CqB,EAAOF,EAAID,EAAG,gBAAgBV,EAAS,WAAWf,EAASO,EAAW,YACtE,CACIsC,aAAa,qBAEhBT,MAAK,WACFxB,GAAW,GACX8B,EAAAA,GAAAA,QAAc,8BAA+B,CAAEC,MAAO,OAAQC,iBAAiB,IAC/E9C,IACFe,EAAQiC,KAAK,aAADC,OAAc/C,EAAQ,KAAA+C,OAAIxC,OAtBhDqB,EAAOF,EAAID,EAAG,gBAAiBV,EAAS,WAAWR,GACnD,CACIsC,aAAa,qBAEhBT,MAAK,WACFvB,EAAQiC,KAAK,aAADC,OAAcxC,IAC1BK,GAAW,GACX8B,EAAAA,GAAAA,QAAc,8BAA+B,CAAEC,MAAO,OAAQC,iBAAiB,IAC/E9C,UAmCTgC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,kCAAAA,EAAAmB,UAAA3B,EAAA,mBAKH,kBA9DyB,OAAAH,EAAA+B,MAAA,KAAAC,YAAA,GA+D1B,OAAOC,EAAAA,EAAAA,MAAA,OAAK1D,UAAS,iCAAAqD,OAAmChD,EAAW,uCAAuC,IAAKJ,SAAA,EAC3GL,EAAAA,EAAAA,KAAA,OAAK+D,QAASvD,EAAiBH,UAE/BL,EAAAA,EAAAA,KAACgE,EAAAA,EAAW,CAAE5D,UAAU,sCAGxBJ,EAAAA,EAAAA,KAAA,MAAAK,SAAI,4BACJL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,+DACVyD,EAAAA,EAAAA,MAAA,WAAS1D,UAAU,uBAAsBC,SAAA,CAAC,IAAIK,IAAYoD,EAAAA,EAAAA,MAAA,SAAAzD,SAAA,CAAO,KAACyD,EAAAA,EAAAA,MAAA,QAAAzD,SAAA,CAAOK,EAAU,UAAW,KAACV,EAAAA,EAAAA,KAACiE,EAAU,CAAC7D,UAAU,mBAAmB8D,KAAM,QAAgB,IAAIvD,IAAYmD,EAAAA,EAAAA,MAAA,SAAAzD,SAAA,EAAOL,EAAAA,EAAAA,KAAA,QAAAK,SAAOM,IAAiB,KAACX,EAAAA,EAAAA,KAACiE,EAAU,CAAC7D,UAAU,mBAAmB8D,KAAM,QAAgB,IAAItD,IAAckD,EAAAA,EAAAA,MAAA,QAAAzD,SAAA,CAAOO,EAAY,OAAS,QACvTZ,EAAAA,EAAAA,KAAA,SAAOmE,KAAK,OAAOC,YAAY,cAAcC,SAlFpB,SAACC,GAAMpD,EAAcoD,EAAEC,OAAOC,WAmFvDV,EAAAA,EAAAA,MAAA,UAAQC,QAASnC,EAAqBvB,SAAA,CAAE,KAAGgB,IAAYrB,EAAAA,EAAAA,KAAA,OAAKyE,MAAM,WAAgB,MAAEzE,EAAAA,EAAAA,KAAA,QAAAK,SAAM,mB,8CC3FlG,IANoB,SAACN,GACnB,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,MAAM,6BAA6BG,UAAWL,EAAMK,UAAWF,QAAQ,YAAYC,KAAK,eAAcE,UAClHL,EAAAA,EAAAA,KAAA,QAAM0E,SAAS,UAAUpE,EAAE,wIAAwIqE,SAAS,gB,8CCI9K,IANe,SAAC5E,GACd,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,MAAM,6BAA6BG,UAAWL,EAAMK,UAAWD,KAAK,OAAOD,QAAQ,YAAY0E,OAAO,eAAcvE,UAChIL,EAAAA,EAAAA,KAAA,QAAM6E,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGzE,EAAE,qI,8CCIvE,IANqB,SAACP,GACpB,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,MAAM,6BAA6BG,UAAWL,EAAMK,UAAWF,QAAQ,YAAYC,KAAK,eAAcE,UAClHL,EAAAA,EAAAA,KAAA,QAAMM,EAAE,qG,8CCKV,IAPiB,SAACP,GAChB,OAAO+D,EAAAA,EAAAA,MAAA,OAAK7D,MAAM,6BAA6BG,UAAWL,EAAMK,UAAWF,QAAQ,YAAYC,KAAK,eAAcE,SAAA,EAClHL,EAAAA,EAAAA,KAAA,QAAMM,EAAE,mFACRN,EAAAA,EAAAA,KAAA,QAAM0E,SAAS,UAAUpE,EAAE,yFAAyFqE,SAAS,iB,8CCG/H,IANmB,SAAC5E,GAClB,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,MAAM,6BAA6BG,UAAWL,EAAMK,UAAWD,KAAK,OAAOD,QAAQ,YAAY0E,OAAO,eAAcvE,UAChIL,EAAAA,EAAAA,KAAA,QAAM6E,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGzE,EAAE,oE,8CCIvE,IANoB,SAACP,GACnB,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,MAAM,6BAA6BG,UAAWL,EAAMK,UAAWD,KAAK,OAAOD,QAAQ,YAAY0E,OAAO,eAAcvE,UAChIL,EAAAA,EAAAA,KAAA,QAAM6E,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGzE,EAAE,6E,0ICA1D0E,EAAS,SAAHzE,GAAwC,IAAlC0E,EAAK1E,EAAL0E,MAAOd,EAAI5D,EAAJ4D,KAAMe,EAAM3E,EAAN2E,OAAQC,EAAK5E,EAAL4E,MAC1C,OACInF,EAAAA,EAAAA,KAAA,OAAAK,UACIL,EAAAA,EAAAA,KAAA,OAAKI,UAAS,SAAAqD,OAAWU,GAAc,IAAMiB,IAAKH,EAAOI,MAAO,CAAEF,MAAAA,EAAOD,OAAAA,GAAUI,IAAI,aAItFC,EAAS,SAAHxC,GAA+B,IAAzBkC,EAAKlC,EAALkC,MAAOf,EAAInB,EAAJmB,KAAMsB,EAAIzC,EAAJyC,KAElC,OADAtB,EAAOA,GAAQ,QAGXlE,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gBAAgBiF,MAAO,CAAEF,MAAOjB,EAAMgB,OAAQhB,GAAO7D,SAE5D4E,GACIjF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,SAASgF,IAAKH,EAAOI,MAAO,CAAEF,MAAOjB,EAAMgB,OAAQhB,GAAQoB,IAAI,WAE9EtF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,cAAciF,MAAO,CAAEF,MAAOjB,EAAMgB,OAAQhB,GAAO7D,UAC9DL,EAAAA,EAAAA,KAACyF,EAAAA,EAAY,CAACC,MAAW,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMG,UAAU,EAAG,GAAIC,MAAM,QAAQzB,KAAK,kBAO1E0B,EAAkB,SAADC,GAAY,IAAT5B,EAAI4B,EAAJ5B,KAE7B,OADAA,EAAOA,GAAQ,QAEXlE,EAAAA,EAAAA,KAAA,OAAKI,UAAU,4BAA4BiF,MAAO,CAAEF,MAAOjB,EAAMgB,OAAQhB,O,2FChBjF,EAZgB,WACZ,OAGJlE,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kBAAiBC,UAE5ByD,EAAAA,EAAAA,MAAA,OAAK1D,UAAU,eAAcC,SAAA,EAACL,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,iB,2FCRtD+F,EAAwB,WAAoC,IAAnCC,EAASnC,UAAAoC,OAAA,QAAAC,IAAArC,UAAA,GAAAA,UAAA,GAAG,kBAC9C,KACIsC,EAAAA,EAAAA,KAASC,EAAAA,EAAAA,MAAeJ,GAC1B,MAAOK,GACLC,QAAQC,IAAI,sCAAD9C,OAAuCuC,EAAS,MAAAvC,OAAK4C,MAM3DG,EAAqB,WAAiD,IAAhDR,EAASnC,UAAAoC,OAAA,QAAAC,IAAArC,UAAA,GAAAA,UAAA,GAAG,kBAAmB4C,EAAM5C,UAAAoC,OAAA,QAAAC,IAAArC,UAAA,GAAAA,UAAA,GAAG,GACvE,KACIsC,EAAAA,EAAAA,KAASC,EAAAA,EAAAA,MAAeJ,EAAWS,GACrC,MAAOJ,GACLC,QAAQC,IAAI,sCAAD9C,OAAuCuC,EAAS,MAAAvC,OAAK4C,EAAK,MAAA5C,OAAKgD,O,sBCdnE,SAASC,EAAuBC,GAU3C,GAAIA,EAAa,CACb,IAEIC,EAZR,SAAoBC,GAGhB,IAFA,IAAMC,EAAQD,EAAWE,MAAM,KAEtBC,EAAI,EAAGA,EAAIF,EAAMb,OAAQe,IAAK,CAAC,IAADC,EAAAC,EACnCJ,EAAME,IAAgB,QAAXC,EAAAH,EAAME,GAAG,UAAE,IAAAC,OAAA,EAAXA,EAAaE,gBAAwB,QAAXD,EAAGJ,EAAME,UAAE,IAAAE,OAAA,EAARA,EAAUE,OAAO,IAG7D,OAAON,EAAMO,KAAK,KAGKC,CAAWX,GAEOY,QAAQ,4FAA6F,IAE9I,OADAX,EAAqC,WAAnBA,EAA8B,UAAYA,EAI5D,OAAO,K,uUCmEf,EArEuB,SAAHrG,GAAsE,IAAjEiH,EAAoBjH,EAApBiH,qBAAqBC,EAAkBlH,EAAlBkH,mBAAmBC,EAAoBnH,EAApBmH,qBAQ7D,OAAO5D,EAAAA,EAAAA,MAAA,OAAK1D,UAAU,uCAAsCC,SAAA,EACpDyD,EAAAA,EAAAA,MAAA,WAAS1D,UAAU,kBAAiBC,SAAA,EACxCL,EAAAA,EAAAA,KAAA,MAAAK,SAAI,iEACyB,KAAb,OAApBmH,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBvB,UAAgBnC,EAAAA,EAAAA,MAAA,QAAM1D,UAAU,iBAAgBC,SAAA,CAAC,aAA+B,OAApBmH,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBvB,OAAO,UAG5F,OAAlBwB,QAAkB,IAAlBA,GAAAA,EAAoBxB,QAASjG,EAAAA,EAAAA,KAAC2H,EAAAA,EAC/B,CACAC,QAAS,CAACC,EAAAA,EAAaC,EAAAA,EAAWC,EAAAA,GAClCC,aAAc,GACdC,cAAe,EACfC,WAAY,GAGZC,MAAM,EACNC,YAAa,CACH,IAAO,CACL,cAAiB,GAEnB,IAAO,CACL,cAAiB,GAEnB,IAAO,CACL,cAAiB,GAEnB,IAAO,CACL,cAAiB,GAEnB,KAAQ,CACN,cAAiB,GAEnB,KAAQ,CACN,cAAiB,IAG7BC,WAAY,CAAEC,WAAW,GAEzBC,SAAU,SAACC,GAAM,OAAKlC,QAAQC,IAAIiC,IAClCC,cAAe,kBAAMnC,QAAQC,IAAI,iBAAgBlG,SAEjDoH,EAAmBiB,KAAI,SAACC,EAAIC,GAAK,OAAI5I,EAAAA,EAAAA,KAAC6I,EAAAA,EAAW,CAAAxI,UAC7CyD,EAAAA,EAAAA,MAAA,OAAK1D,UAAU,2BAA2B2D,QAAS,kBAAI2D,EAAqBiB,EAAIG,YAAWzI,SAAA,EAEvFL,EAAAA,EAAAA,KAAA,WAASI,UAAU,6BAA4BC,UAC3DL,EAAAA,EAAAA,KAAC+I,EAAAA,EAAW,CAAC3I,UAAgC,OAApBoH,QAAoB,IAApBA,GAAAA,EAAsBwB,SAASL,EAAIG,WAAY,yEAA0E,kCAAmC5E,KAAM,QAEnLlE,EAAAA,EAAAA,KAACiJ,EAAAA,QAAS,CACZvD,MAAOiD,EAAIO,cACVC,YAAaR,EAAIG,UACpBM,OAAQT,EAAIU,YACXC,MAAOX,QAV+CC,SAgB3D5I,EAAAA,EAAAA,KAACuJ,EAAAA,QAAO,Q,+DCnBR,EAnD0B,SAAHhJ,GAA8C,IAAzCqI,EAAKrI,EAALqI,MAAMY,EAASjJ,EAATiJ,UAAU9B,EAAoBnH,EAApBmH,qBACvB+B,GAAiB/H,EAAAA,EAAAA,YAAWC,EAAAA,GAArCF,SAER,OAAOqC,EAAAA,EAAAA,MAAA,WAAS1D,UAAU,qBAAoBC,SAAA,EAE1CL,EAAAA,EAAAA,KAAA,QAAMyE,MAAM,uBAAsBpE,SAAEuI,EAAQ,KAC5C5I,EAAAA,EAAAA,KAAA,OAAM+D,QAAS,kBAAM2D,EAA8B,OAAT8B,QAAS,IAATA,OAAS,EAATA,EAAWV,YAAWzI,UAChEL,EAAAA,EAAAA,KAAC0J,EAAAA,EAAK,CAACtJ,UAAU,iBAGjBJ,EAAAA,EAAAA,KAAA,SAAOI,UAAU,kBAAiBC,UAClCL,EAAAA,EAAAA,KAAC2J,EAAAA,GAAI,CACTvJ,UAAU,QACVwJ,GAAI,CACAC,SAAS,iBAADpG,OAA4B,OAAT+F,QAAS,IAATA,OAAS,EAATA,EAAWV,UAAS,KAAArF,OAAa,OAAT+F,QAAS,IAATA,OAAS,EAATA,EAAWN,cAAa,KAAAzF,QAAIiD,EAAAA,EAAAA,GAAgC,OAAT8C,QAAS,IAATA,OAAS,EAATA,EAAWM,mBACjHC,MAAO,CACHC,KAAMC,KAAKC,UAAUV,GACrBW,UAAWF,KAAKC,UAAUV,KAEhCnJ,UAEFL,EAAAA,EAAAA,KAACoK,EAAAA,cAAa,CAAChF,IAAc,OAAToE,QAAS,IAATA,OAAS,EAATA,EAAWH,YAAY,GAAI/D,IAAI,yBAAyB+E,OAAO,cAGnFvG,EAAAA,EAAAA,MAAA,SAAO1D,UAAU,qBAAoBC,SAAA,EAErCyD,EAAAA,EAAAA,MAAC6F,EAAAA,GAAI,CACLvJ,UAAU,QACVwJ,GAAI,CACAC,SAAS,iBAADpG,OAA4B,OAAT+F,QAAS,IAATA,OAAS,EAATA,EAAWV,UAAS,KAAArF,OAAa,OAAT+F,QAAS,IAATA,OAAS,EAATA,EAAWN,cAAa,KAAAzF,QAAIiD,EAAAA,EAAAA,GAAgC,OAAT8C,QAAS,IAATA,OAAS,EAATA,EAAWM,mBACjHC,MAAO,CACHC,KAAMC,KAAKC,UAAUV,GACrBW,UAAWF,KAAKC,UAAUV,KAEhCnJ,SAAA,CAAC,KAACyD,EAAAA,EAAAA,MAAA,MAAAzD,SAAA,CAAI,IAAW,OAATmJ,QAAS,IAATA,OAAS,EAATA,EAAWV,UAAU/B,MAAM,IAAI,GAAG,GAAG,OAAM,QAEzD/G,EAAAA,EAAAA,KAAA,QAAAK,SAAgB,OAATmJ,QAAS,IAATA,OAAS,EAATA,EAAWN,iBAClBlJ,EAAAA,EAAAA,KAACsK,EAAAA,EAAU,CAAClK,UAAU,0CACtB0D,EAAAA,EAAAA,MAAA,QAAAzD,SAAA,CAAM,IAAW,OAATmJ,QAAS,IAATA,OAAS,EAATA,EAAWM,iBAAiB,QACpC9J,EAAAA,EAAAA,KAAA,KAAAK,SAAa,OAATmJ,QAAS,IAATA,OAAS,EAATA,EAAWe,oBACfzG,EAAAA,EAAAA,MAAA,OAAK1D,UAAU,oBAAmBC,SAAA,EAClCL,EAAAA,EAAAA,KAACuF,EAAAA,GAAM,CAACrB,KAAM,OAAQe,MAAgB,OAATuE,QAAS,IAATA,OAAS,EAATA,EAAWgB,WAAYhF,KAAMiE,KAC1DzJ,EAAAA,EAAAA,KAAA,KAAGI,UAAU,mBAAkBC,SAAW,OAATmJ,QAAS,IAATA,OAAS,EAATA,EAAW/H,qB,4CC7C5C,EANoB,SAAC1B,GACnB,OAAMC,EAAAA,EAAAA,KAAA,OAAKC,MAAM,6BAA6BG,UAAWL,EAAMK,UAAWF,QAAQ,YAAYC,KAAK,eAAcE,UACjHL,EAAAA,EAAAA,KAAA,QAAMM,EAAE,iS,WC4YV,EA9XiB,WACb,IAAAmK,GAA0B/I,EAAAA,EAAAA,YAAWC,EAAAA,GAA7B+I,EAAID,EAAJC,KAAKjJ,EAAQgJ,EAARhJ,SACbkJ,GAA2CC,EAAAA,EAAAA,MAAnClK,EAAQiK,EAARjK,SAAUC,EAAQgK,EAARhK,SAAUC,EAAU+J,EAAV/J,WAC5BC,GAAwDC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7D2G,EAAoBzG,EAAA,GAAE8J,EAAuB9J,EAAA,GACpDI,GAAoDL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzDsG,EAAkBrG,EAAA,GAAE0J,EAAqB1J,EAAA,GAChD2J,GAAoCjK,EAAAA,EAAAA,WAAS,GAAMkK,GAAAhK,EAAAA,EAAAA,GAAA+J,EAAA,GAA5CtK,EAAUuK,EAAA,GAAEC,EAAaD,EAAA,GAChCE,GAA8BpK,EAAAA,EAAAA,WAAS,GAAMqK,GAAAnK,EAAAA,EAAAA,GAAAkK,EAAA,GAAtC7J,EAAO8J,EAAA,GAAE7J,EAAU6J,EAAA,GAC1BC,GAA8DtK,EAAAA,EAAAA,WAAS,GAAMuK,GAAArK,EAAAA,EAAAA,GAAAoK,EAAA,GAAtEE,EAAuBD,EAAA,GAAEE,EAA0BF,EAAA,GAC1DG,GAAsC1K,EAAAA,EAAAA,YAAU2K,GAAAzK,EAAAA,EAAAA,GAAAwK,EAAA,GAAzCE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAE5BG,EAAe,WACjB,OAAOhJ,QAAQC,IAAI,CACf,kCAEHC,MAAK,SAAAvC,GACF,MAAM,CAACyC,WADUhC,EAAAA,EAAAA,GAAAT,EAAA,GAAJ,QAKfmH,EACF,SAACmE,GAC2B,OAApBrE,QAAoB,IAApBA,GAAAA,EAAsBwB,SAAS6C,GAC/BhB,GAAwB,SAAAiB,GAAI,OAAQ,OAAJA,QAAI,IAAJA,GAAAA,EAAM7F,OAAa,OAAJ6F,QAAI,IAAJA,OAAI,EAAJA,EAAMC,QAAO,SAAApD,GAAG,OAAIA,IAAQkD,KAAa,MAExFhB,GAAwB,SAAAiB,GAAI,OAAQ,OAAJA,QAAI,IAAJA,GAAAA,EAAM7F,OAAM,CAAI4F,GAASpI,QAAAuI,EAAAA,EAAAA,GAAKF,IAAQ,CAACD,OAO7ErL,GAAmB,WACrByK,GAAexK,IAIbwL,GAAoB,SAACC,GAEvB,OAAOzE,EAAmBsE,QAAO,SAAA/B,GAAI,OAAIA,EAAKlB,YAAcoD,OAIlCC,EAAAA,EAAAA,cAAWrK,EAAAA,EAAAA,GAAAC,IAAAA,MACrC,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAE,EAAA6J,EAAAC,EAAA,OAAAtK,IAAAA,MAAA,SAAAS,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACoB,OAAhBpB,GAAW,GAAKkB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE2BkJ,IAAgB,OAAA3J,EAAAO,EAAAS,KAAAf,EAAAD,EAAjDe,UAAWb,EAAED,EAAFC,GAAGC,EAAGF,EAAHE,IAAIC,EAAMH,EAANG,QACxB3B,GAAaC,GAAaC,EAerBF,GAAYC,IAAaC,GASxB2B,EAAQH,EAAID,EAAG,gBAAgBV,EAAS,WAAWf,EAASC,EAAS,YAC3E0B,EAAOE,GACNO,MAAK,SAAAwJ,GAEFzB,GAAwB,eAAA0B,EAAA,OAA0B,QAA1BA,EAAMD,EAActC,cAAM,IAAAuC,OAAA,EAApBA,EAAsBC,aACpDlL,GAAW,OAKVZ,GAAYC,GAAYC,IAC7B0F,QAAQC,IAAI,QAQNhE,EAAQH,EAAID,EAAG,gBAAgBV,EAAS,WAAWf,EAASC,EAASC,GAC3EyB,EAAOE,GACNO,MAAK,SAAAwJ,GAEFzB,GAAwB,eAAA4B,EAAA,OAA0B,QAA1BA,EAAMH,EAActC,cAAM,IAAAyC,OAAA,EAApBA,EAAsBD,aACpDlL,GAAW,QA/CTiB,EAASH,EAAID,EAAG,gBAAgBV,EAAS,WAAWf,GAE1D2B,EAAOE,GAMNO,MAAK,SAAAwJ,GAEFzB,GAAwB,eAAA6B,EAAA,OAA0B,QAA1BA,EAAMJ,EAActC,cAAM,IAAA0C,OAAA,EAApBA,EAAsBF,aACpDlL,GAAW,OAwClBkB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,kCAAAA,EAAAmB,UAAA3B,EAAA,mBAQL,CAACP,EAASf,EAAUC,EAAUC,KAGlC+L,EAAAA,EAAAA,YAAU,WAMN,OAAO,YACS,KAEjB,CAAClL,IAKJ,IAAMmL,GAA2B,eAAA/K,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAA8K,IAAA,IAAAC,EAAAC,EAAA5K,EAAAC,EAAAE,EAAA,OAAAP,IAAAA,MAAA,SAAAiL,GAAA,cAAAA,EAAAvK,KAAAuK,EAAAtK,MAAA,UACP,OAApB8E,QAAoB,IAApBA,GAAAA,EAAsBvB,OAAO,CAAD+G,EAAAtK,KAAA,eAAAsK,EAAArK,OAAA,SACzBS,EAAAA,GAAAA,MAAY,yDAA0D,CAAEC,MAAO,OAAQC,iBAAiB,KAAO,OACvF,OAAhCiI,GAA2B,GAAKyB,EAAAvK,KAAA,EAAAuK,EAAAtK,KAAA,EAEQkJ,IAAgB,OAAAkB,EAAAE,EAAA/J,KAAA8J,EAAAD,EAAjD9J,UAAWb,EAAE4K,EAAF5K,GAAGC,EAAG2K,EAAH3K,IAAIE,EAAMyK,EAANzK,QAErB5B,GAAaC,GAAaC,EAiDrBF,GAAYC,IAAaC,EAW9B0B,EAAOF,EAAID,EAAG,gBAAgBV,EAAS,WAAWf,EAASC,EAAS,YACpE,CACI6L,UAAWhF,IAEd1E,MAAK,WAEF,IAAImK,EAAiBhB,GAAkBzE,EAAqB,IAe5DlF,EAAOF,EAAID,EAAG,gBAAgBV,EAAS,iBAAiBf,GACxD,CACIA,SAAUA,EACVC,SAAUA,EACVuM,WAAY1F,EAAqBvB,OACjCuG,UAAWhF,EACX2F,gBAAiBF,EAAe,GAAG5D,YAAY,GAC/C+D,UAAW3L,EACX4L,UAAW,IAAIC,KACf9C,WAAgB,OAAJE,QAAI,IAAJA,OAAI,EAAJA,EAAM6C,WAErBzK,MAAK,WACF6I,EAAe,iBAADlI,OAAkBhC,EAAQ,KAAAgC,OAAI/C,EAAQ,KAAA+C,OAAI9C,KACxD6F,EAAAA,EAAAA,GAAmB,qBAAsB,CAAC/E,SAASA,EAASf,SAASA,EAASC,SAASA,IACvFyC,EAAAA,GAAAA,QAAc,8BAA+B,CAAEC,MAAO,OAAQC,iBAAiB,IAC/EiI,GAA2B,SAO9B7K,GAAYC,GAAYC,GAW7B0B,EAAOF,EAAID,EAAG,gBAAgBV,EAAS,WAAWf,EAASC,EAASC,GACpE,CACI4L,UAAWhF,IAEd1E,MAAK,WAEF,IAAImK,EAAiBhB,GAAkBzE,EAAqB,IAiB5DlF,EAAOF,EAAID,EAAG,gBAAgBV,EAAS,iBAAiBf,GACxD,CACIA,SAAUA,EACVC,SAAUA,EACVC,WAAYA,EACZsM,WAAY1F,EAAqBvB,OACjCuG,UAAWhF,EACX2F,gBAAiBF,EAAe,GAAG5D,YAAY,GAC/C+D,UAAW3L,EACX4L,UAAW,IAAIC,KACf9C,WAAgB,OAAJE,QAAI,IAAJA,OAAI,EAAJA,EAAM6C,WAErBzK,MAAK,WACF6I,EAAe,iBAADlI,OAAkBhC,EAAQ,KAAAgC,OAAI/C,EAAQ,KAAA+C,OAAI9C,EAAQ,KAAA8C,OAAI7C,KACpE4F,EAAAA,EAAAA,GAAmB,qBAAsB,CAAC/E,SAASA,EAASf,SAASA,EAASE,WAAWA,IACzFwC,EAAAA,GAAAA,QAAc,8BAA+B,CAAEC,MAAO,OAAQC,iBAAiB,IAC/EiI,GAA2B,SAjJnCjJ,EAAOF,EAAID,EAAG,gBAAgBV,EAAS,WAAWf,GAClD,CACI8L,UAAWhF,IAEd1E,MAAK,WAEF,IAAImK,EAAiBhB,GAAkBzE,EAAqB,IAe5DlF,EAAOF,EAAID,EAAG,gBAAgBV,EAAS,iBAAiBf,GACxD,CACIA,SAAUA,EACVwM,WAAY1F,EAAqBvB,OACjCuG,UAAWhF,EACX2F,gBAAiBF,EAAe,GAAG5D,YAAY,GAC/C+D,UAAW3L,EACX4L,UAAW,IAAIC,KACf9C,WAAgB,OAAJE,QAAI,IAAJA,OAAI,EAAJA,EAAM6C,WAErBzK,MAAK,YACF0D,EAAAA,EAAAA,GAAmB,qBAAsB,CAAC/E,SAASA,EAASf,SAASA,IACrE0C,EAAAA,GAAAA,QAAc,8BAA+B,CAAEC,MAAO,OAAQC,iBAAiB,IAC/EqI,EAAe,iBAADlI,OAAkBhC,EAAQ,KAAAgC,OAAI/C,IAC5C6K,GAA2B,SAoHtCyB,EAAAtK,KAAA,iBAAAsK,EAAAvK,KAAA,GAAAuK,EAAAtJ,GAAAsJ,EAAA,kCAAAA,EAAArJ,UAAAkJ,EAAA,mBAMJ,kBA5KgC,OAAAhL,EAAA+B,MAAA,KAAAC,YAAA,GAgNjC,OAjCA8I,EAAAA,EAAAA,YAAS7K,EAAAA,EAAAA,GAAAC,IAAAA,MAAC,SAAAyL,IAAA,IAAAC,EAAAC,EAAAvL,EAAAwL,EAAAC,EAAA,OAAA7L,IAAAA,MAAA,SAAA8L,GAAA,cAAAA,EAAApL,KAAAoL,EAAAnL,MAAA,OACgB,IAAL,GACbjB,EAAS,CAADoM,EAAAnL,KAAA,gBAAAmL,EAAApL,KAAA,EAAAoL,EAAAnL,KAAA,EAM0CkJ,IAAgB,OAAA6B,EAAAI,EAAA5K,KAAAyK,EAAAD,EAAzDzK,UAAWb,EAAEuL,EAAFvL,GAAGwL,EAAOD,EAAPC,QAAQC,EAAUF,EAAVE,WAC/BD,EAAQC,EAAWzL,EAAG,qBAAqBV,EAAS,WACnDqB,MAAK,SAAAwJ,GACF,IAAIwB,EAAkB,GAGtBxB,EAAcyB,SAAQ,SAAApF,GACjBmF,EAAgBtK,KAAQ,OAAHmF,QAAG,IAAHA,OAAG,EAAHA,EAAKqB,WAG/Bc,EAAsBgD,MAGxBD,EAAAnL,KAAA,iBAAAmL,EAAApL,KAAA,GAAAoL,EAAAnK,GAAAmK,EAAA,SAIEvH,QAAQC,IAAI,eAAcsH,EAAAnK,IAAK,eAAAmK,EAAAlL,OAAA,UAGhC,YACS,KACf,yBAAAkL,EAAAlK,UAAA6J,EAAA,mBACF,CAAC/L,KAEGqC,EAAAA,EAAAA,MAAA,OAAK1D,UAAU,mBAAkBC,SAAA,EAEpCL,EAAAA,EAAAA,KAACgO,EAAAA,EAAiB,CAACtN,SAAUA,EAAUC,SAAUA,EAAUC,WAAYA,EAAYJ,iBAAkBA,GAAkBC,WAAYA,IAE/HiL,IAAe1L,EAAAA,EAAAA,KAAA,WAASI,UAAU,0BAAyBC,UACvDyD,EAAAA,EAAAA,MAAA,OAAK1D,UAAU,OAAMC,SAAA,EACjBL,EAAAA,EAAAA,KAAC+I,EAAAA,EAAW,CAAC3I,UAAU,UACvBJ,EAAAA,EAAAA,KAAA,KAAAK,SAAG,uCACHL,EAAAA,EAAAA,KAAC2J,EAAAA,GAAI,CAACC,GAAI8B,EACNtL,UAAU,OAAMC,UACnBL,EAAAA,EAAAA,KAAA,KAAAK,SAAG,gCAKhByD,EAAAA,EAAAA,MAAA,WAAS1D,UAAU,kBAAiBC,SAAA,EAChCyD,EAAAA,EAAAA,MAAA,SAAO1D,UAAU,wBAAuBC,SAAA,EAACyD,EAAAA,EAAAA,MAAA,MAAAzD,SAAA,CAAI,IAAEK,EAAS,KAACV,EAAAA,EAAAA,KAACsK,EAAAA,EAAU,CAAClK,UAAU,uBAAuB8D,KAAM,KAAM,IAAEvD,GAAsB,GAAG,IAAEA,IAAYX,EAAAA,EAAAA,KAACsK,EAAAA,EAAU,CAAClK,UAAU,uBAAuB8D,KAAM,KAAO,IAAEtD,GAA0B,GAAG,OAAM,OACpO,OAApB4G,QAAoB,IAApBA,GAAAA,EAAsBvB,QAAWrF,GAAmJkD,EAAAA,EAAAA,MAAA,SAAAzD,SAAA,CAAO,KAACyD,EAAAA,EAAAA,MAAA,UAAQmK,SAAU3C,EAAyBvH,QAAS6I,GAA4BvM,SAAA,EAACL,EAAAA,EAAAA,KAAC+I,EAAAA,EAAW,CAAC3I,UAAU,gCAA+B,2BAA8B,QAAnT0D,EAAAA,EAAAA,MAAA,SAAAzD,SAAA,CAAO,KAACyD,EAAAA,EAAAA,MAAA,UAAQC,QAASvD,GAAiBH,SAAA,EAAEL,EAAAA,EAAAA,KAACkO,EAAAA,EAAU,CAAC9N,UAAU,qCAAqC,gBAAmB,UAGzKiB,GAmBKrB,EAAAA,EAAAA,KAACuJ,EAAAA,QAAO,KAnBHzF,EAAAA,EAAAA,MAAA,WAAS1D,UAAU,qBAAoBC,SAAA,GAErB,OAApBmH,QAAoB,IAApBA,GAAAA,EAAsBvB,UAAUnC,EAAAA,EAAAA,MAAA,WAAS1D,UAAU,8BAA6BC,SAAA,EAC7EL,EAAAA,EAAAA,KAACmO,EAAW,CAAC/N,UAAU,iCACvBJ,EAAAA,EAAAA,KAAA,KAAAK,SAAG,kCACHyD,EAAAA,EAAAA,MAAA,KAAAzD,SAAA,CAAG,yCAAuCK,MACxCE,IAAckD,EAAAA,EAAAA,MAAA,UAAQC,QAASvD,GAAiBH,SAAA,EAACL,EAAAA,EAAAA,KAACkO,EAAAA,EAAU,CAAC9N,UAAU,qCAAqC,8BAI9F,OAApBoH,QAAoB,IAApBA,GAAAA,EAAsBvB,QAASjG,EAAAA,EAAAA,KAAA,WAASI,UAAU,iCAAgCC,SAC7EoH,EAAmBsE,QAAO,SAAApD,GAAG,OAAwB,OAApBnB,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBwB,SAASL,EAAIG,cAAYJ,KAAI,SAACsB,EAAMpB,GAAK,OAAK5I,EAAAA,EAAAA,KAACoO,EAAiB,CAACxF,MAAOA,EAAOlB,qBAAsBA,EAAkC8B,UAAWQ,GAAlBpB,QAI/K,OAOzB5I,EAAAA,EAAAA,KAACqO,EAAiB,CAAC3G,qBAAsBA,EAAsBF,qBAAsBA,EAAsBqD,wBAAyBA,EAAyBpD,mBAAoBA,KAEjLzH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,sBAAqBC,SACV,OAApBmH,QAAoB,IAApBA,GAAAA,EAAsBvB,QAAWrF,GAAmJkD,EAAAA,EAAAA,MAAA,SAAAzD,SAAA,CAAO,KAACyD,EAAAA,EAAAA,MAAA,UAAQmK,SAAU3C,EAAyBvH,QAAS6I,GAA4BvM,SAAA,EAACL,EAAAA,EAAAA,KAACgE,EAAAA,EAAW,CAAC5D,UAAU,8BAA8B8D,KAAM,KAAM,2BAA8B,QAA9TJ,EAAAA,EAAAA,MAAA,SAAAzD,SAAA,CAAO,KAACyD,EAAAA,EAAAA,MAAA,UAAQC,QAASvD,GAAiBH,SAAA,EAAEL,EAAAA,EAAAA,KAACkO,EAAAA,EAAU,CAAC9N,UAAU,qCAAqC,gBAAmB,c","sources":["components/global/icons/caretRight.js","components/global/PlaylistFormModal/index.js","components/global/icons/check_Circle.js","components/global/icons/delete.js","components/global/icons/dots_Verticle.js","components/global/icons/edit.js","components/global/icons/plus_circle.js","components/global/icons/xMark_Circle.js","components/global/images/index.js","components/loading/index.js","functions/commonMethod.js","functions/filterSlideSubCategory.js","pages/Playlist/components/SlideMultilevelSlider/index.js","pages/Playlist/components/PlaylistSlideCard/index.js","components/global/icons/addGrid_Icon.js","pages/Playlist/index.js"],"sourcesContent":["import React from 'react'\n\nconst CaretRight = (props) => {\n  return<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 512\" fill='currentColor' className={props.className}><path d=\"M118.6 105.4l128 127.1C252.9 239.6 256 247.8 256 255.1s-3.125 16.38-9.375 22.63l-128 127.1c-9.156 9.156-22.91 11.9-34.88 6.943S64 396.9 64 383.1V128c0-12.94 7.781-24.62 19.75-29.58S109.5 96.23 118.6 105.4z\"/></svg>\n}\n\nexport default CaretRight","import React,{useContext, useState} from 'react';\n\nimport { toast } from 'react-toastify';\nimport './index.scss';\nimport { useHistory } from 'react-router-dom';\n// import { doc, getDoc, getFirestore, setDoc } from 'firebase/firestore';\nimport { AuthContext } from '../../signUp/authMethods/authentication';\nimport CloseCircle from '../icons/xMark_Circle';\nimport CaretRight from '../icons/caretRight';\n\nconst PlayListFormModal = ({visibilityToogle,visibility,levelone , leveltwo , levelthree})=>{\n    const [folderName , setFolderName] =  useState('')\n    const [loading , setLoading] = useState(false)\n    let history = useHistory();\n    const { username } = useContext(AuthContext);\n\n    const setFolderNameHandler = (e)=>{ setFolderName(e.target.value) }\n    // const db = getFirestore();\n    const getFirebaseAll=()=>{\n        return Promise.all([\n            import('../../../firebase/firestore')\n        ])\n        .then(([firestore])=>{\n            return{firestore}\n        })\n    }\n    const createFolderPlaylist = async()=>{\n        if(loading) return;\n        setLoading(true)\n   try {\n      const {firestore:{db,doc,getDoc,setDoc}}=await getFirebaseAll() \n     const docRef = doc(db,'Web-User-Data', username,'Playlist',folderName)\n     getDoc(docRef)\n      .then((snapshot)=>{\n          if(snapshot.exists()){\n             setLoading(false)\n         toast.error('Playlist already exist.',{ theme: 'dark', hideProgressBar: true })\n          }else{\n           if(!levelone && !leveltwo && !levelthree){\n           \n             setDoc(doc(db,'Web-User-Data', username,'Playlist',folderName),\n             {\n                 playlistName:'playlistNameTest'\n             })\n             .then(()=>{\n                 history.push(`/playlist/${folderName}`)\n                 setLoading(false)\n                 toast.success(\"Playlist added successfully\", { theme: 'dark', hideProgressBar: true });\n                 visibilityToogle()\n            \n             })\n         }\n             else if(levelone && !leveltwo && !levelthree){\n                   \n                     setDoc(doc(db,'Web-User-Data',username,'Playlist',levelone,folderName,'playlist'),\n                     {\n                         playlistName:'playlistNameTest'\n                     })\n                     .then(()=>{\n                         setLoading(false)\n                         toast.success(\"Playlist added successfully\", { theme: 'dark', hideProgressBar: true });\n                         visibilityToogle()\n                       history.push(`/playlist/${levelone}/${folderName}`)\n                     })\n             \n           }\n           else if(levelone && leveltwo && !levelthree){\n            \n           \n             setDoc(doc(db,'Web-User-Data',username,'Playlist',levelone,leveltwo,folderName),\n                     {\n                         playlistName:'playlistNameTest'\n                     })\n             .then(()=>{\n                 setLoading(false)\n                 toast.success(\"Playlist added successfully\", { theme: 'dark', hideProgressBar: true });\n                 visibilityToogle()\n               history.push(`/playlist/${levelone}/${leveltwo}/${folderName}`)\n             })\n     \n   }\n          \n         }\n      })\n       \n   } catch (error) {\n       \n   }\n    }\n    return <div className={`playlist-form-modal-container ${visibility?'playlist-form-modal-container-active':''}`}>\n        <div onClick={visibilityToogle}>\n\n        <CloseCircle  className=\"playlist-form-modal-close-icon\"/>\n        </div>\n     \n        <h5>Enter your folder name</h5>\n        <span>You can organize the uploaded slides in different folder.</span>\n    <section className=\"playlist-folder-name\"> {  levelone && <aside> <span>{levelone }    </span> <CaretRight className=\"arrow-right-icon\" size={20} /></aside> } {  leveltwo && <aside><span>{leveltwo }</span> <CaretRight className=\"arrow-right-icon\" size={20} /></aside> } {  levelthree && <span>{levelthree } </span>} </section>\n        <input type=\"text\" placeholder='Folder Name' onChange={setFolderNameHandler} />\n        <button onClick={createFolderPlaylist} >  {loading &&  <div class=\"loader\"></div>}  <span>Create</span></button>\n    </div>\n}\n\n\nexport default PlayListFormModal;","import React from 'react'\n\nconst CheckCircle = (props) => {\n  return <svg xmlns=\"http://www.w3.org/2000/svg\" className={props.className} viewBox=\"0 0 20 20\" fill=\"currentColor\">\n  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n</svg>\n}\n\nexport default CheckCircle","import React from 'react'\n\nconst Delete = (props) => {\n  return <svg xmlns=\"http://www.w3.org/2000/svg\" className={props.className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n</svg>\n}\n\nexport default Delete","import React from 'react'\n\nconst VerticleDots = (props) => {\n  return <svg xmlns=\"http://www.w3.org/2000/svg\" className={props.className} viewBox=\"0 0 20 20\" fill=\"currentColor\">\n  <path d=\"M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z\" />\n</svg>\n}\n\nexport default VerticleDots","import React from 'react'\n\nconst EditIcon = (props) => {\n  return <svg xmlns=\"http://www.w3.org/2000/svg\" className={props.className} viewBox=\"0 0 20 20\" fill=\"currentColor\">\n  <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\" />\n  <path fillRule=\"evenodd\" d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\" clipRule=\"evenodd\" />\n</svg>\n}\n\nexport default EditIcon","import React from 'react'\n\nconst PlusCircle = (props) => {\n  return <svg xmlns=\"http://www.w3.org/2000/svg\" className={props.className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n</svg>\n}\n\nexport default PlusCircle","import React from 'react'\n\nconst CloseCircle = (props) => {\n  return <svg xmlns=\"http://www.w3.org/2000/svg\" className={props.className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n</svg>\n}\n\nexport default CloseCircle","import React from 'react'\nimport { DisplayTitle } from '../Titles'\nimport './_images.scss'\n\nexport const Images = ({ Image, type, height, width }) => {\n    return (\n        <div>\n            <img className={`image ${type ? type : \"\"}`} src={Image} style={{ width, height }} alt='image'></img>\n        </div>\n    )\n}\nexport const Avatar = ({ Image, size, text }) => {\n    size = size || \"50px\"\n    return (\n\n        <div className=\"image-wrapper\" style={{ width: size, height: size }}>\n            {\n                Image ?\n                    <img className=\"avatar\" src={Image} style={{ width: size, height: size }} alt='image'></img>\n                    :\n                    <div className=\"avatar-text\" style={{ width: size, height: size }}>\n                        <DisplayTitle title={text?.substring(0, 1)} color='white' type=\"display4\" />\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport const AvatarPlaceholder=({size})=>{\n    size = size || \"50px\"\n    return(\n        <div className=\"image-wrapper-placeholder\" style={{ width: size, height: size }}>\n      \n                {/* <img className=\"avatarPlaceholder\" style={{ width: size, height: size }} alt='image'></img> */}\n                \n        \n    </div>\n    )\n\n    \n}\n","import React from 'react';\nimport './index.scss'\n\nconst Loading = ()=>{\n    return(\n\n\n<div className=\"loading-wrapper\"> \n\n    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\n</div>\n\n    )\n}\n\nexport default Loading;","import {getAnalytics, logEvent} from 'firebase/analytics';\nexport const logEventWithoutParams = (eventName = \"some_event_name\") => {\n    try {\n        logEvent(getAnalytics(),eventName)\n    } catch (error) {\n        console.log(`EVENT WITHOUT PARAMS ERROR LOGGED: ${eventName}, ${error}`)\n\n    }\n\n}\n\nexport const logEventWithParams = (eventName = \"some_event_name\", params = {}) => {\n    try {\n        logEvent(getAnalytics(),eventName, params)\n    } catch (error) {\n        console.log(`EVENT WITHOUT PARAMS ERROR LOGGED: ${eventName}, ${error} ,${params}`)\n    }\n}\n\n","\nexport default function filterSlideSubcategory(subCategory) {\n    function capitalize(mySentence) {\n        const words = mySentence.split(\" \");\n\n        for (let i = 0; i < words.length; i++) {\n            words[i] = words[i][0]?.toUpperCase() + words[i]?.substr(1);\n        }\n\n        return words.join(\" \");\n    }\n    if (subCategory) {\n        let capitalizedWords = capitalize(subCategory)\n        // console.log('capitalize', capitalizedWords, subCategory)\n        let capatalizefinal =   capitalizedWords.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]\\s|[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]|\\s/g, '');\n        capatalizefinal = capatalizefinal == 'Gynoobs'? 'GynoObs' : capatalizefinal;\n        return capatalizefinal;\n\n    } else {\n        return null\n    }\n}","import React from 'react';\n// import Swiper core and required modules\nimport { Pagination, Scrollbar, A11y } from 'swiper';\n\nimport { Swiper, SwiperSlide } from 'swiper/react';\n// Import Swiper styles\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\nimport 'swiper/components/pagination/pagination.scss';\nimport 'swiper/components/scrollbar/scrollbar.scss';\n// import useLocalStorage from '../../../../customHooks/useLocalStorage';\nimport SlideCard from '../../../SlideDetail/components/slideCard';\nimport './index.scss';\n// import { AiOutlineCheckSquare } from 'react-icons/ai';\nimport Loading from '../../../../components/loading';\nimport CheckCircle from '../../../../components/global/icons/check_Circle';\n\nconst PlaylistSlider = ({slideaddedToPlaylist,useruploadedSlides,addToPlayListHandler})=>{\n\n  \n   \n\n\n\n\n    return <div className=\"playlist-select-your-slide-container\">\n            <section className=\"playlist-footer\">\n        <h3> Please select your slides you want to add to this playlist </h3>\n  { slideaddedToPlaylist?.length !== 0 && <span className='selected-count'>Selected ({slideaddedToPlaylist?.length})</span>}  \n        </section>\n        \n    {useruploadedSlides?.length ? <Swiper\n    // install Swiper modules\n    modules={[Pagination,  Scrollbar, A11y]}\n    spaceBetween={10}\n    slidesPerView={5}\n    navigation={{\n              \n            }}\n    loop={true}\n    breakpoints={{\n              \"200\": {\n                \"slidesPerView\": 1,\n              },\n              \"500\": {\n                \"slidesPerView\": 1,\n              },\n              \"725\": {\n                \"slidesPerView\": 2,\n              },\n              \"768\": {\n                \"slidesPerView\": 3,\n              },\n              \"1024\": {\n                \"slidesPerView\": 4,\n              },\n              \"1250\": {\n                \"slidesPerView\": 5,\n              }\n            }}\n    pagination={{ clickable: true }}\n\n    onSwiper={(swiper) => console.log(swiper)}\n    onSlideChange={() => console.log('slide change')}\n  >\n   {useruploadedSlides.map((ele,index)=> <SwiperSlide key={index}>  \n        <div className='playlist-slide-container' onClick={()=>addToPlayListHandler(ele.SlideName)}>\n           \n            <section className=\"playlist-checkbox-selected\">\n<CheckCircle className={ slideaddedToPlaylist?.includes(ele.SlideName) ?'playlist-checkbox-icon-selected playlist-checkbox-icon-selected-active' :'playlist-checkbox-icon-selected'} size={60} />\n            </section>\n        <SlideCard\n      title={ele.slideCategory}\n       description={ele.SlideName}\n    images={ele.slideImages}\n     datas={ele} />\n</div>\n     </SwiperSlide>)}\n\n  </Swiper>\n:\n<Loading/>\n}\n    </div>\n}\n\nexport default PlaylistSlider;","import React, { useContext } from 'react';\nimport './index.scss';\nimport { Avatar} from '../../../../components/global/images';\n\nimport filterSlideSubcategory from '../../../../functions/filterSlideSubCategory';\nimport { Link } from 'react-router-dom';\nimport { AuthContext } from '../../../../components/signUp/authMethods/authentication';\nimport ArrowRight from '../../../../components/global/icons/arrow_right';\nimport Close from '../../../../components/global/icons/xMark';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nconst PlaylistSlideCard = ({index,slideData,addToPlayListHandler})=>{\n    const { username:usernameauth } = useContext(AuthContext)\n\n    return <section className=\"playlist-slidecard\">\n\n        <span class=\"playlist-rank-number\">{index + 1}</span>\n        <div  onClick={() => addToPlayListHandler(slideData?.SlideName)}>\n        <Close className='closeIcon' />\n        </div>\n\n        <aside className='card-thumbnails'>\n        <Link\n    className='links'\n    to={{\n        pathname: `/slidedetails/${slideData?.SlideName}/${slideData?.slideCategory}/${filterSlideSubcategory(slideData?.slideSubCategory)}`,\n        state: {\n            data: JSON.stringify(slideData),\n            wholeData: JSON.stringify(slideData),\n        }\n    }}>  \n       {/* <img loading=\"lazy\" src={slideData?.slideImages[0]} alt='Slides thumbnail image' /> */}\n    <LazyLoadImage src={slideData?.slideImages[0]} alt='Slides thumbnail image' effect='blur'/>\n     </Link>\n        </aside>\n    <aside className='slide-descriptions'>\n   \n    <Link\n    className='links'\n    to={{\n        pathname: `/slidedetails/${slideData?.SlideName}/${slideData?.slideCategory}/${filterSlideSubcategory(slideData?.slideSubCategory)}`,\n        state: {\n            data: JSON.stringify(slideData),\n            wholeData: JSON.stringify(slideData),\n        }\n    }}> <h3> {slideData?.SlideName.split('-',1)[0]} </h3> </Link>\n\n<span>{slideData?.slideCategory}</span>\n<ArrowRight className='playlist-categoryAndSubCategory-icon' />\n<span> {slideData?.slideSubCategory} </span>\n<p>{slideData?.slideDescription}</p>\n<div className='user-descriptions'>\n<Avatar size={'20px'} Image={slideData?.userAvatar} text={usernameauth} />\n<p className='user-avatar-name'>{slideData?.username}</p>\n</div>\n\n    </aside>\n    </section>\n    \n  \n}\n\nexport default PlaylistSlideCard;","import React from 'react'\n\nconst GridAddIcon = (props) => {\n  return<svg xmlns=\"http://www.w3.org/2000/svg\" className={props.className} viewBox=\"0 0 20 20\" fill=\"currentColor\">\n  <path d=\"M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM14 11a1 1 0 011 1v1h1a1 1 0 110 2h-1v1a1 1 0 11-2 0v-1h-1a1 1 0 110-2h1v-1a1 1 0 011-1z\" />\n</svg>\n} \n\nexport default GridAddIcon","import React, { useState, useEffect, useCallback, useContext } from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\n\nimport './index.scss';\nimport MultiSliderSwiper from './components/SlideMultilevelSlider/index';\nimport PlaylistSlideCard from './components/PlaylistSlideCard';\nimport PlayListFormModal from '../../components/global/PlaylistFormModal';\nimport { toast } from 'react-toastify';\nimport Loading from '../../components/loading';\nimport { AuthContext } from '../../components/signUp/authMethods/authentication';\nimport { logEventWithParams } from '../../functions/commonMethod';\n// import { collection, doc, getDoc, getDocs, getFirestore, setDoc } from 'firebase/firestore';\nimport ArrowRight from '../../components/global/icons/arrow_right';\nimport CloseCircle from '../../components/global/icons/xMark_Circle';\nimport GridAddIcon from '../../components/global/icons/addGrid_Icon';\nimport PlusCircle from '../../components/global/icons/plus_circle';\nimport CheckCircle from '../../components/global/icons/check_Circle';\nconst Playlist = () => {\n    const { user,username } = useContext(AuthContext);\n    const { levelone, leveltwo, levelthree } = useParams()\n    const [slideaddedToPlaylist, setSlideAddedToPlaylist] = useState([])\n    const [useruploadedSlides, setUserUploadedSlides] = useState([])\n    const [visibility, setVisibility] = useState(false)\n    const [loading, setLoading] = useState(false)\n    const [uplaodtoFirebaseloading, setUplaodtoFirebaseLoading] = useState(false);\n    const [publishLink, setPublishLink] = useState();\n    // const db = getFirestore();\n    const getFirebaseAll=()=>{\n        return Promise.all([\n            import('../../firebase/firestore')\n        ])\n        .then(([firestore])=>{\n            return{firestore}\n        })\n    }\n\n    const addToPlayListHandler =\n        (slideName) => {\n            if (slideaddedToPlaylist?.includes(slideName)) {\n                setSlideAddedToPlaylist(init => init?.length ? init?.filter(ele => ele !== slideName) : [])\n            } else {\n                setSlideAddedToPlaylist(init => init?.length ? [slideName, ...init] : [slideName])\n\n            }\n\n\n        }\n \n    const visibilityToogle = () => {\n        setVisibility(!visibility)\n    }\n\n    //Getting thumbnaik images for slideplaylist\n    const getThumbnailImage = (firstslide) => {\n\n        return useruploadedSlides.filter(data => data.SlideName === firstslide)\n\n    }\n    //getting slides from playlist\n    const getSlidesFromPlaylist = useCallback(\n        async() => {\n            setLoading(true)\n           try {\n               const {firestore:{db,doc,getDoc}}=await getFirebaseAll()\n            if (levelone && !leveltwo && !levelthree) {\n                const docRef = doc(db,'Web-User-Data',username,'Playlist',levelone)\n                // console.log('playlist test',levelone)\n                getDoc(docRef)\n                // firebase.firestore().collection('Web-User-Data')\n                // .doc(username)\n                // .collection('Playlist')\n                // .doc(levelone)\n                // .get()\n                .then(querySnapshot => {\n\n                    setSlideAddedToPlaylist(() => querySnapshot.data()?.slideList)\n                    setLoading(false)\n                })\n            }\n            else if (levelone && leveltwo && !levelthree) {\n\n                // firebase.firestore().collection('Web-User-Data')\n                // .doc(username)\n                // .collection('Playlist')\n                // .doc(levelone)\n                // .collection(leveltwo)\n                // .doc('playlist')\n                // .get()\n                const docRef= doc(db,'Web-User-Data',username,'Playlist',levelone,leveltwo,'playlist')\n                getDoc(docRef)\n                .then(querySnapshot => {\n\n                    setSlideAddedToPlaylist(() => querySnapshot.data()?.slideList)\n                    setLoading(false)\n\n                })\n\n            }\n            else if (levelone && leveltwo && levelthree) {\n                console.log(\"Here\")\n                // firebase.firestore().collection('Web-User-Data')\n                // .doc(username)\n                // .collection('Playlist')\n                // .doc(levelone)\n                // .collection(leveltwo)\n                // .doc(levelthree)\n                // .get()\n                const docRef= doc(db,'Web-User-Data',username,'Playlist',levelone,leveltwo,levelthree)\n                getDoc(docRef)\n                .then(querySnapshot => {\n\n                    setSlideAddedToPlaylist(() => querySnapshot.data()?.slideList)\n                    setLoading(false)\n\n                })\n\n            }\n               \n           } catch (error) {\n               \n           }\n\n\n        },\n        [username,levelone, leveltwo, levelthree],\n    )\n\n    useEffect(() => {\n        let isMounted = true;\n        if (isMounted && username){\n            // getSlidesFromPlaylist()\n        } \n\n        return () => {\n            isMounted = false;\n        }\n    }, [username])\n\n\n    //Uploading Slides to Playlist/folder\n\n    const addSlidesToPlaylistFirebase = async() => {\n        if (!slideaddedToPlaylist?.length)\n         return toast.error(\"You must select at least one slide to create playlist.\", { theme: 'dark', hideProgressBar: true });\n        setUplaodtoFirebaseLoading(true)\n       try {\n        const {firestore:{db,doc,setDoc}}=await getFirebaseAll()\n\n        if (levelone && !leveltwo && !levelthree) {\n            // firebase.firestore().collection('Web-User-Data')\n            // .doc(username)\n            // .collection('Playlist')\n            // .doc(levelone)\n            // .set({\n            //     slideList: slideaddedToPlaylist\n            // })\n            setDoc(doc(db,'Web-User-Data',username,'Playlist',levelone),\n            {\n                slideList: slideaddedToPlaylist\n            })\n            .then(() => {\n\n                let thumbnailImage = getThumbnailImage(slideaddedToPlaylist[0])\n                // firebase.firestore().collection('Web-User-Data')\n                // .doc(username)\n                // .collection('ListOfPlaylist')\n                // .doc(levelone)\n                // .set({\n                //     levelone: levelone,\n                //     slideCount: slideaddedToPlaylist.length,\n                //     slideList: slideaddedToPlaylist,\n                //     slideThumbnails: thumbnailImage[0].slideImages[0],\n                //     createdBy: username,\n                //     createdAt: new Date(),\n                //     userAvatar: user?.photoURL\n\n                // })\n                setDoc(doc(db,'Web-User-Data',username,'ListOfPlaylist',levelone),\n                {\n                    levelone: levelone,\n                    slideCount: slideaddedToPlaylist.length,\n                    slideList: slideaddedToPlaylist,\n                    slideThumbnails: thumbnailImage[0].slideImages[0],\n                    createdBy: username,\n                    createdAt: new Date(),\n                    userAvatar: user?.photoURL\n                })\n                .then(() => {\n                    logEventWithParams('web_playlist_added', {username:username,levelone:levelone })\n                    toast.success(\"Playlist added successfully\", { theme: 'dark', hideProgressBar: true });\n                    setPublishLink(`/viewplaylist/${username}/${levelone}`);\n                    setUplaodtoFirebaseLoading(false)\n                })\n\n\n            })\n        }\n        else if (levelone && leveltwo && !levelthree) {\n\n            // firebase.firestore().collection('Web-User-Data')\n            // .doc(username)\n            // .collection('Playlist')\n            // .doc(levelone)\n            // .collection(leveltwo)\n            // .doc('playlist')\n            // .set({\n            //     slideList: slideaddedToPlaylist\n            // })\n            setDoc(doc(db,'Web-User-Data',username,'Playlist',levelone,leveltwo,'playlist'),\n            {\n                slideList: slideaddedToPlaylist\n            })\n            .then(() => {\n\n                let thumbnailImage = getThumbnailImage(slideaddedToPlaylist[0])\n                // firebase.firestore().collection('Web-User-Data')\n                // .doc(username)\n                // .collection('ListOfPlaylist')\n                // .doc(levelone)\n                // .set({\n                //     levelone: levelone,\n                //     leveltwo: leveltwo,\n                //     slideCount: slideaddedToPlaylist.length,\n                //     slideList: slideaddedToPlaylist,\n                //     slideThumbnails: thumbnailImage[0].slideImages[0],\n                //     createdBy: username,\n                //     createdAt: new Date(),\n                //     userAvatar: user?.photoURL\n                // })\n                setDoc(doc(db,'Web-User-Data',username,'ListOfPlaylist',levelone),\n                {\n                    levelone: levelone,\n                    leveltwo: leveltwo,\n                    slideCount: slideaddedToPlaylist.length,\n                    slideList: slideaddedToPlaylist,\n                    slideThumbnails: thumbnailImage[0].slideImages[0],\n                    createdBy: username,\n                    createdAt: new Date(),\n                    userAvatar: user?.photoURL\n                })\n                .then(() => {\n                    setPublishLink(`/viewplaylist/${username}/${levelone}/${leveltwo}`);\n                    logEventWithParams('web_playlist_added', {username:username,levelone:levelone,leveltwo:leveltwo })\n                    toast.success(\"Playlist added successfully\", { theme: 'dark', hideProgressBar: true });\n                    setUplaodtoFirebaseLoading(false)\n\n                })\n\n            })\n\n        }\n        else if (levelone && leveltwo && levelthree) {\n\n            // firebase.firestore().collection('Web-User-Data')\n            // .doc(username)\n            // .collection('Playlist')\n            // .doc(levelone)\n            // .collection(leveltwo)\n            // .doc(levelthree)\n            // .set({\n            //     slideList: slideaddedToPlaylist\n            // })\n            setDoc(doc(db,'Web-User-Data',username,'Playlist',levelone,leveltwo,levelthree),\n            {\n                slideList: slideaddedToPlaylist\n            })\n            .then(() => {\n\n                let thumbnailImage = getThumbnailImage(slideaddedToPlaylist[0])\n                // firebase.firestore().collection('Web-User-Data')\n                // .doc(username)\n                // .collection('ListOfPlaylist')\n                // .doc(levelone)\n                // .set({\n                //     levelone: levelone,\n                //     leveltwo: leveltwo,\n                //     levelthree: levelthree,\n                //     slideCount: slideaddedToPlaylist.length,\n                //     slideList: slideaddedToPlaylist,\n                //     slideThumbnails: thumbnailImage[0].slideImages[0],\n                //     createdBy: username,\n                //     createdAt: new Date(),\n                //     userAvatar: user?.photoURL\n\n                // })\n                setDoc(doc(db,'Web-User-Data',username,'ListOfPlaylist',levelone),\n                {\n                    levelone: levelone,\n                    leveltwo: leveltwo,\n                    levelthree: levelthree,\n                    slideCount: slideaddedToPlaylist.length,\n                    slideList: slideaddedToPlaylist,\n                    slideThumbnails: thumbnailImage[0].slideImages[0],\n                    createdBy: username,\n                    createdAt: new Date(),\n                    userAvatar: user?.photoURL\n                })\n                .then(() => {\n                    setPublishLink(`/viewplaylist/${username}/${levelone}/${leveltwo}/${levelthree}`);\n                    logEventWithParams('web_playlist_added', {username:username,levelone:levelone,levelthree:levelthree})\n                    toast.success(\"Playlist added successfully\", { theme: 'dark', hideProgressBar: true });\n                    setUplaodtoFirebaseLoading(false)\n\n                })\n\n            })\n\n        }\n       } catch (error) {\n           \n       }\n\n\n    }\n\n    //Fetchinf every slides uploaded by the users\n    useEffect(async() => {\n         let isMounted = true;\n        if (username) {\n            // firebase.firestore().collection('UserUploadedSlides')\n            // .doc(username)\n            // .collection('slides')\n            // .get()\n           try{\n               const{firestore:{db,getDocs,collection}}=await getFirebaseAll()\n            getDocs(collection(db,'UserUploadedSlides',username,'slides'))\n            .then(querySnapshot => {\n                let slidescolletion = []\n\n                // console.log('query',querySnapshot)\n                querySnapshot.forEach(ele => {\n                     slidescolletion.push(ele?.data())\n                })\n\n                setUserUploadedSlides(slidescolletion)\n\n\n            })\n\n           } \n            catch(err){\n                console.log('catching err',err)\n            }\n        }\n        return () => {\n            isMounted = false;\n        }\n    }, [username])\n\n    return <div className=\"playlist-wrapper\">\n        {/* Levels are just folders sub directory */}\n        <PlayListFormModal levelone={levelone} leveltwo={leveltwo} levelthree={levelthree} visibilityToogle={visibilityToogle} visibility={visibility} />\n        {\n            publishLink && <section className='publish-alert-container'>\n                <div className='text'>\n                    <CheckCircle className='icon' />\n                    <p>Your playlist has been published.</p>\n                    <Link to={publishLink}\n                        className='link'\n                    ><p>Visit your playlist</p></Link>\n                </div>\n                {/* <IoMdClose className='close-icon' /> */}\n            </section>\n        }\n        <section className=\"playlist-header\">\n            <aside className='playlist-header-title'><h3> {levelone} <ArrowRight className='playlist-header-icon' size={30} /> {leveltwo ? leveltwo : ''} {leveltwo && <ArrowRight className='playlist-header-icon' size={30} />} {levelthree ? levelthree : ''} </h3> </aside>\n            {!slideaddedToPlaylist?.length && !levelthree ? <aside> <button onClick={visibilityToogle} ><PlusCircle className='playlist-header-icon-button-plus' />Add Folder</button> </aside> : <aside> <button disabled={uplaodtoFirebaseloading} onClick={addSlidesToPlaylistFirebase}><CheckCircle className='playlist-header-icon-button'/>Publish Your Playlist</button> </aside>}\n        </section>\n        {\n            !loading ? <section className=\"playlist-container\">\n                {\n                    !slideaddedToPlaylist?.length && <section className=\"playlist-container-add-zone\">\n                        <GridAddIcon className='playlist-header-icon-button' />\n                        <p>Add slides to your playlist.</p>\n                        <p>Select slide from below to add inside {levelone}</p>\n                        {!levelthree && <button onClick={visibilityToogle}><PlusCircle className='playlist-header-icon-button-plus' />Create another folder</button>}\n                    </section>\n                }\n                {\n                    slideaddedToPlaylist?.length ? <section className=\"addedslidetoplaylist-container\">\n                        {useruploadedSlides.filter(ele => slideaddedToPlaylist?.includes(ele.SlideName)).map((data, index) => <PlaylistSlideCard index={index} addToPlayListHandler={addToPlayListHandler} key={index} slideData={data} />\n                        )\n\n                        }\n                    </section> : ''\n                }\n\n            </section>\n                : <Loading />\n        }\n\n        <MultiSliderSwiper addToPlayListHandler={addToPlayListHandler} slideaddedToPlaylist={slideaddedToPlaylist} setSlideAddedToPlaylist={setSlideAddedToPlaylist} useruploadedSlides={useruploadedSlides} />\n\n        <div className='mobileView-iconShow'>\n            {!slideaddedToPlaylist?.length && !levelthree ? <aside> <button onClick={visibilityToogle} ><PlusCircle className='playlist-header-icon-button-plus' />Add Folder</button> </aside> : <aside> <button disabled={uplaodtoFirebaseloading} onClick={addSlidesToPlaylistFirebase}><CloseCircle className='playlist-header-icon-button' size={27} />Publish Your Playlist</button> </aside>}\n\n        </div>\n    </div>\n}\nexport default Playlist; "],"names":["props","_jsx","xmlns","viewBox","fill","className","children","d","_ref","visibilityToogle","visibility","levelone","leveltwo","levelthree","_useState","useState","_useState2","_slicedToArray","folderName","setFolderName","_useState3","_useState4","loading","setLoading","history","useHistory","username","useContext","AuthContext","createFolderPlaylist","_ref4","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$getFirebaseAll","_yield$getFirebaseAll2","db","doc","getDoc","setDoc","docRef","_context","prev","next","abrupt","Promise","all","then","_ref2","firestore","sent","snapshot","exists","toast","theme","hideProgressBar","playlistName","push","concat","t0","stop","apply","arguments","_jsxs","onClick","CloseCircle","CaretRight","size","type","placeholder","onChange","e","target","value","class","fillRule","clipRule","stroke","strokeLinecap","strokeLinejoin","strokeWidth","Images","Image","height","width","src","style","alt","Avatar","text","DisplayTitle","title","substring","color","AvatarPlaceholder","_ref3","logEventWithoutParams","eventName","length","undefined","logEvent","getAnalytics","error","console","log","logEventWithParams","params","filterSlideSubcategory","subCategory","capatalizefinal","mySentence","words","split","i","_words$i$","_words$i","toUpperCase","substr","join","capitalize","replace","slideaddedToPlaylist","useruploadedSlides","addToPlayListHandler","Swiper","modules","Pagination","Scrollbar","A11y","spaceBetween","slidesPerView","navigation","loop","breakpoints","pagination","clickable","onSwiper","swiper","onSlideChange","map","ele","index","SwiperSlide","SlideName","CheckCircle","includes","SlideCard","slideCategory","description","images","slideImages","datas","Loading","slideData","usernameauth","Close","Link","to","pathname","slideSubCategory","state","data","JSON","stringify","wholeData","LazyLoadImage","effect","ArrowRight","slideDescription","userAvatar","_useContext","user","_useParams","useParams","setSlideAddedToPlaylist","setUserUploadedSlides","_useState5","_useState6","setVisibility","_useState7","_useState8","_useState9","_useState10","uplaodtoFirebaseloading","setUplaodtoFirebaseLoading","_useState11","_useState12","publishLink","setPublishLink","getFirebaseAll","slideName","init","filter","_toConsumableArray","getThumbnailImage","firstslide","useCallback","_docRef","_docRef2","querySnapshot","_querySnapshot$data2","slideList","_querySnapshot$data3","_querySnapshot$data","useEffect","addSlidesToPlaylistFirebase","_callee2","_yield$getFirebaseAll3","_yield$getFirebaseAll4","_context2","thumbnailImage","slideCount","slideThumbnails","createdBy","createdAt","Date","photoURL","_callee3","_yield$getFirebaseAll5","_yield$getFirebaseAll6","getDocs","collection","_context3","slidescolletion","forEach","PlayListFormModal","disabled","PlusCircle","GridAddIcon","PlaylistSlideCard","MultiSliderSwiper"],"sourceRoot":""}