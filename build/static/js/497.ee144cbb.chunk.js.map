{"version":3,"file":"static/js/497.ee144cbb.chunk.js","mappings":"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","sources":["../node_modules/@firebase/storage/src/implementation/constants.ts","../node_modules/@firebase/storage/src/implementation/error.ts","../node_modules/@firebase/storage/src/implementation/location.ts","../node_modules/@firebase/storage/src/implementation/connection.ts","../node_modules/@firebase/storage/src/implementation/failrequest.ts","../node_modules/@firebase/storage/src/implementation/type.ts","../node_modules/@firebase/storage/src/implementation/url.ts","../node_modules/@firebase/storage/src/implementation/request.ts","../node_modules/@firebase/storage/src/implementation/backoff.ts","../node_modules/@firebase/storage/src/implementation/fs.ts","../node_modules/@firebase/storage/src/implementation/string.ts","../node_modules/@firebase/storage/src/platform/browser/base64.ts","../node_modules/@firebase/storage/src/implementation/blob.ts","../node_modules/@firebase/storage/src/implementation/json.ts","../node_modules/@firebase/storage/src/implementation/path.ts","../node_modules/@firebase/storage/src/implementation/metadata.ts","../node_modules/@firebase/storage/src/implementation/list.ts","../node_modules/@firebase/storage/src/implementation/requestinfo.ts","../node_modules/@firebase/storage/src/implementation/requests.ts","../node_modules/@firebase/storage/src/implementation/taskenums.ts","../node_modules/@firebase/storage/src/implementation/observer.ts","../node_modules/@firebase/storage/src/implementation/async.ts","../node_modules/@firebase/storage/src/platform/browser/connection.ts","../node_modules/@firebase/storage/src/task.ts","../node_modules/@firebase/storage/src/reference.ts","../node_modules/@firebase/storage/src/service.ts","../node_modules/@firebase/storage/src/constants.ts","../node_modules/@firebase/storage/src/api.ts","../node_modules/@firebase/storage/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to StorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (progressEvent: ProgressEvent) => void =\n        progressEvent => {\n          const loaded = progressEvent.loaded;\n          const total = progressEvent.lengthComputable\n            ? progressEvent.total\n            : -1;\n          if (this.progressCallback_ !== null) {\n            this.progressCallback_(loaded, total);\n          }\n        };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || this.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: Unsubscribe | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport { EmulatorMockTokenOptions, getModularInstance } from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"],"names":["DEFAULT_HOST","StorageError","_inherits","code","message","_classCallCheck","_this","prependCode","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","this","customData","set","FirebaseError","unknown","canceled","cannotSliceBlob","invalidArgument","appDeleted","invalidFormat","format","internalError","ErrorCode","Location","bucket","path","path_","_createClass","key","get","length","value","encode","encodeURIComponent","bucketString","host","bucketLocation","makeFromUrl","e","url","location","bucketDomain","gsRegex","RegExp","httpModify","loc","decodeURIComponent","firebaseStorageHost","replace","groups","regex","indices","postModify","charAt","slice","i","group","captures","exec","bucketValue","pathValue","invalidUrl","FailRequest","error","promise_","Promise","reject","isString","p","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","hasOwnProperty","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","_this2","resolve_","reject_","start_","backoffDone","requestWentThrough","status","_this3","connection","wasSuccessCode","result","getResponse","err","getErrorText","RequestEndStatus","f","callback","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","handler","clearGlobalTimeout","clearTimeout","success","call","waitMillis","Math","random","stopped","stop","wasTimeout","start","backoffCallback","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","isRetryStatusCode_","successCode","indexOf","wasCanceled","ABORT","appDelete","abort","isFiveHundredCode","isExtraRetryCode","isRequestSpecificRetryCode","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","undefined","bb","append","StringFormat","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataUrl","parts","DataURLParts","base64","rest","decoded","percentEncodedBytes_","dataURLBytes_","b","c","charCodeAt","push","Uint8Array","hasMinus","hasUnder","hasPlus","hasSlash","bytes","atob","array","dataURL","matches","match","middle","s","end","substring","endsWith","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","size_","type_","startByte","endByte","sliced","blob","webkitSlice","mozSlice","sliceBlob","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","jsonObjectOrNull","obj","JSON","parse","Array","isArray","lastComponent","lastIndexOf","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","getMappings","mappings","nameMapping","_metadata","fullPath","xformPath","sizeMapping","Number","fromResource","service","resource","len","mapping","defineProperty","_makeStorageReference","addRef","fromResourceString","resourceString","toResourceString","stringify","fromResponseString","listResult","prefixes","items","nextPageToken","_step","pathWithoutTrailingSlash","reference","_iterator","_step2","item","_iterator2","fromBackendResponse","RequestInfo","method","urlParams","headers","body","errorHandler","progressCallback","successCodes","additionalRetryCodes","handlerCheck","cndn","metadataHandler","xhr","text","downloadUrlHandler","tokens","split","token","alt","downloadUrlFromResourceString","_protocol","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata","fullServerUrl","maxOperationRetryTime","requestInfo","list","delimiter","pageToken","maxResults","isRoot","bucketOnlyServerUrl","listHandler","metadataForUpload_","metadataClone","assign","determineContentType_","multipartUpload","boundary","str","toString","genBoundary","metadata_","preBlobPart","postBlobPart","name","maxUploadRetryTime","uploadData","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadStatus","newCurrent","TaskState","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","next","observer","async","argsToForward","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","_this4","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_this5","_codeEquals","completeTransitions_","_transition","_metadataErrorHandler","_promise","_start","sizeBefore","_this6","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","_continueUpload","_oneShotUpload","all","storage","_getAuthToken","_getAppCheckToken","authToken","appCheckToken","_this7","_resolveToken","metadataForUpload","createResumableUpload","_this8","_location","createRequest","_makeRequest","getPromise","sizeString","isNaN","getResumableUploadStatus","_this9","statusRequest","_this10","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","_this11","metadataRequest","_this12","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","_addObserver","_this13","_removeObserver","onFulfilled","onRejected","_notifyObserver","splice","_finishPromise","_this14","triggered","fbsAsync","bind","snapshot","valid","Reference","_service","_newRef","newPath","parent","invalidRootOperation","listAllHelper","_listAllHelper","accumulator","opt","_context4","nextPage","options","op","requestsList","makeRequestWithTokens","getDownloadURL","_throwIfRoot","requestsGetDownloadUrl","deleteObject","_xhr","_text","requestsDeleteObject","_getChild","childPath","canonicalChildPath","filter","component","join","child","refFromPath","FirebaseStorageImpl","_bucket","serviceOrRef","pathOrUrl","test","extractBucket","config","makeFromBucketSpec","app","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","_overrideAuthToken","_context","auth","getImmediate","optional","getToken","tokenData","accessToken","appCheck","_context2","request","clear","requestFactory","appId","firebaseVersion","addGmpidHeader_","addAuthHeader_","addVersionHeader_","addAppCheckHeader_","makeRequest","add","_this15","delete","_context3","_yield$Promise$all","_yield$Promise$all2","STORAGE_TYPE","uploadBytesResumable","uploadBytesResumableInternal","getModularInstance","listAll","listAllInternal","getDownloadURLInternal","deleteObjectInternal","refInternal","getStorage","getApp","bucketUrl","storageProvider","_getProvider","storageInstance","identifier","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","_registerComponent","Component","setMultipleInstances","registerVersion","version"],"sourceRoot":""}